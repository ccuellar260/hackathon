{"version":3,"file":"js/345.f81e0cb7.js","mappings":"8JAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACE,IAAI,iBAAiBC,YAAY,CAAC,MAAQ,OAAO,OAAS,UACvI,EACIC,EAAkB,G,oBCOtB,GACAC,KAAA,gBACAC,OAAAA,GACA,KAAAC,WACA,EACAC,QAAA,CACAD,SAAAA,GAEA,MAAAE,EAAA,IAAAC,EAAAA,IAGAC,EAAA,IAAAD,EAAAA,IAAA,GAAAE,OAAAC,WAAAD,OAAAE,YAAA,QACAH,EAAAI,SAAAC,EAAA,EAGA,MAAAC,EAAA,IAAAP,EAAAA,IACAO,EAAAC,QAAAN,OAAAC,WAAAD,OAAAE,aACA,KAAAK,MAAAC,eAAAC,YAAAJ,EAAAK,YAGA,MAAAC,EAAA,IAAAb,EAAAA,IACAc,EAAAD,EAAAE,KAAA,yFACAC,EAAAH,EAAAE,KAAA,qFAGAE,EAAA,IAAAjB,EAAAA,IAAA,SAGAkB,EAAA,IAAAlB,EAAAA,IAAA,CACAmB,IAAAL,EACAE,gBAAAA,EACAI,kBAAA,KAIAC,EAAA,IAAArB,EAAAA,IAAA,YACAqB,EAAAhB,SAAAiB,IAAA,OACAvB,EAAAwB,IAAAF,GAEA,MAAAG,EAAA,IAAAxB,EAAAA,IAAAiB,EAAAC,GACAnB,EAAAwB,IAAAC,GAGA,MAAAC,EAAA,IAAAC,EAAAA,EAAAzB,EAAAM,EAAAK,YACAa,EAAAE,YAAA,EACAF,EAAAG,UAAA,GACAH,EAAAI,WAAA,EAGA,MAAAC,EAAAA,KACAC,sBAAAD,GAGAN,EAAAQ,SAAAC,GAAA,KAEA1B,EAAApB,OAAAY,EAAAE,EAAA,EAGA6B,IAGA5B,OAAAgC,iBAAA,eACAjC,EAAAkC,OAAAjC,OAAAC,WAAAD,OAAAE,YACAH,EAAAmC,yBACA7B,EAAAC,QAAAN,OAAAC,WAAAD,OAAAE,YAAA,GAEA,IC3E4P,I,UCQxPiC,GAAY,OACd,EACAlD,EACAO,GACA,EACA,KACA,WACA,MAIF,EAAe2C,EAAiB,O","sources":["webpack://hackathon/./src/views/PlanetaTierra.vue","webpack://hackathon/src/views/PlanetaTierra.vue","webpack://hackathon/./src/views/PlanetaTierra.vue?c5a2","webpack://hackathon/./src/views/PlanetaTierra.vue?7462"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{ref:\"earthContainer\",staticStyle:{\"width\":\"100%\",\"height\":\"100vh\"}})\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div ref=\"earthContainer\" style=\"width: 100%; height: 100vh;\"></div>\r\n\r\n</template>\r\n  \r\n  <script>\r\n  import * as THREE from 'three';\r\n  import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\n  \r\n  export default {\r\n    name: 'PlanetaTierra',\r\n    mounted() {\r\n      this.initEarth();\r\n    },\r\n    methods: {\r\n      initEarth() {\r\n        // 1. Crear la escena\r\n        const scene = new THREE.Scene();\r\n  \r\n        // 2. Crear la cámara\r\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n        camera.position.z = 3; // Posicionamos la cámara\r\n  \r\n        // 3. Crear el renderizador\r\n        const renderer = new THREE.WebGLRenderer();\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        this.$refs.earthContainer.appendChild(renderer.domElement);\r\n  \r\n        // 4. Cargar la textura del mapa de la Tierra y el mapa de relieve\r\n        const textureLoader = new THREE.TextureLoader();\r\n        const earthTexture = textureLoader.load('https://upload.wikimedia.org/wikipedia/commons/8/83/Equirectangular_projection_SW.jpg');\r\n        const displacementMap = textureLoader.load('https://upload.wikimedia.org/wikipedia/commons/c/c3/Earth_relief_location_map.jpg'); // Mapa de relieve\r\n  \r\n        // 5. Crear la esfera (planeta)\r\n        const geometry = new THREE.SphereGeometry(1, 64, 64); // Incrementamos la calidad a 64x64\r\n  \r\n        // 6. Aplicar la textura y el mapa de desplazamiento (relieve)\r\n        const material = new THREE.MeshPhongMaterial({\r\n          map: earthTexture, // Textura del mapa\r\n          displacementMap: displacementMap, // Mapa de relieve\r\n          displacementScale: 0.1, // Escala del relieve (ajusta según el efecto deseado)\r\n        });\r\n  \r\n        // 7. Añadir luces para que se vean las sombras y el relieve\r\n        const light = new THREE.DirectionalLight(0xffffff, 1);\r\n        light.position.set(5, 5, 5);\r\n        scene.add(light);\r\n  \r\n        const earth = new THREE.Mesh(geometry, material);\r\n        scene.add(earth);\r\n  \r\n        // 8. Configurar los controles de órbita (OrbitControls)\r\n        const controls = new OrbitControls(camera, renderer.domElement);\r\n        controls.enableZoom = true;\r\n        controls.zoomSpeed = 0.5;\r\n        controls.enablePan = false;\r\n  \r\n        // 9. Función de animación\r\n        const animate = () => {\r\n          requestAnimationFrame(animate);\r\n  \r\n          // Rotar la Tierra lentamente\r\n          earth.rotation.y += 0.001;\r\n  \r\n          renderer.render(scene, camera);\r\n        };\r\n  \r\n        animate();\r\n  \r\n        // Ajustar el tamaño al redimensionar la ventana\r\n        window.addEventListener('resize', () => {\r\n          camera.aspect = window.innerWidth / window.innerHeight;\r\n          camera.updateProjectionMatrix();\r\n          renderer.setSize(window.innerWidth, window.innerHeight);\r\n        });\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Añadir estilos personalizados si es necesario */\r\n  </style>\r\n  ","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./PlanetaTierra.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./PlanetaTierra.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./PlanetaTierra.vue?vue&type=template&id=17c6ec54&scoped=true\"\nimport script from \"./PlanetaTierra.vue?vue&type=script&lang=js\"\nexport * from \"./PlanetaTierra.vue?vue&type=script&lang=js\"\nimport style0 from \"./PlanetaTierra.vue?vue&type=style&index=0&id=17c6ec54&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"17c6ec54\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","ref","staticStyle","staticRenderFns","name","mounted","initEarth","methods","scene","THREE","camera","window","innerWidth","innerHeight","position","z","renderer","setSize","$refs","earthContainer","appendChild","domElement","textureLoader","earthTexture","load","displacementMap","geometry","material","map","displacementScale","light","set","add","earth","controls","OrbitControls","enableZoom","zoomSpeed","enablePan","animate","requestAnimationFrame","rotation","y","addEventListener","aspect","updateProjectionMatrix","component"],"sourceRoot":""}