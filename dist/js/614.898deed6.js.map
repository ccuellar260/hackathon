{"version":3,"file":"js/614.898deed6.js","mappings":"8JAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACE,IAAI,uBAAuBC,YAAY,CAAC,MAAQ,OAAO,OAAS,UAC7I,EACIC,EAAkB,G,oBCOtB,GACAC,KAAA,UACAC,OAAAA,GACA,KAAAC,iBACA,EACAC,QAAA,CACAD,eAAAA,GAEA,MAAAE,EAAA,IAAAC,EAAAA,IAGAC,EAAA,IAAAD,EAAAA,IAAA,GAAAE,OAAAC,WAAAD,OAAAE,YAAA,QACAH,EAAAI,SAAAC,EAAA,GAGA,MAAAC,EAAA,IAAAP,EAAAA,IACAO,EAAAC,QAAAN,OAAAC,WAAAD,OAAAE,aACA,KAAAK,MAAAC,qBAAAC,YAAAJ,EAAAK,YAMA,MAAAC,EAAA,IAAAb,EAAAA,IAAA,SAKAc,EAAA,IAAAC,EAAAA,IACAC,EAAAF,EAAAG,KAAAC,EAAA,OAGAC,EAAA,IAAAnB,EAAAA,IAAA,CAAAoB,IAAAJ,IACAK,EAAA,IAAArB,EAAAA,IAAAa,EAAAM,GACApB,EAAAuB,IAAAD,GAKA,MAAAE,EAAA,IAAAvB,EAAAA,IAAA,gBACAuB,EAAAlB,SAAAmB,IAAA,OACAzB,EAAAuB,IAAAC,GAIA,MAAAE,EAAA,IAAAzB,EAAAA,IAAA,UACA0B,EAAA,IAAA1B,EAAAA,IAAA,CAAA2B,MAAA,WACAC,EAAA,IAAA5B,EAAAA,IAAAyB,EAAAC,GACA3B,EAAAuB,IAAAM,GAGA,MAAAC,EAAA,IACAC,EAAA,IAAA9B,EAAAA,IAAA6B,EAAA,IACAE,EAAA,IAAA/B,EAAAA,IAAA,CAAA2B,MAAA,WACAK,EAAA,IAAAhC,EAAAA,IAAA8B,EAAAC,GACAC,EAAAC,SAAAC,EAAAC,KAAAC,GAAA,EACArC,EAAAuB,IAAAU,GAGA,MAAAK,EAAA,IAAAC,EAAAA,EAAArC,EAAAM,EAAAK,YACAyB,EAAAE,YAAA,EAGA,MAAAC,EAAAA,KACAC,sBAAAD,GAGAnB,EAAAY,SAAAS,GAAA,IAGA,MAAAC,EAAA,KAAAC,KAAAC,MACAjB,EAAAvB,SAAA6B,EAAAL,EAAAM,KAAAW,IAAAH,GACAf,EAAAvB,SAAAC,EAAAuB,EAAAM,KAAAY,IAAAJ,GAGApC,EAAApB,OAAAY,EAAAE,EAAA,EAGAuC,IAGAtC,OAAA8C,iBAAA,eACA/C,EAAAgD,OAAA/C,OAAAC,WAAAD,OAAAE,YACAH,EAAAiD,yBACA3C,EAAAC,QAAAN,OAAAC,WAAAD,OAAAE,YAAA,GAEA,IC/FqP,I,UCQjP+C,GAAY,OACd,EACAhE,EACAO,GACA,EACA,KACA,WACA,MAIF,EAAeyD,EAAiB,O","sources":["webpack://hackathon/./src/views/Prueba.vue","webpack://hackathon/src/views/Prueba.vue","webpack://hackathon/./src/views/Prueba.vue?4643","webpack://hackathon/./src/views/Prueba.vue?0a29"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{ref:\"solarSystemContainer\",staticStyle:{\"width\":\"100%\",\"height\":\"100vh\"}})\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div ref=\"solarSystemContainer\" style=\"width: 100%; height: 100vh;\"></div>\r\n</template>\r\n\r\n<script>\r\nimport * as THREE from 'three';\r\nimport { TextureLoader } from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\n\r\nexport default {\r\n  name: 'PruebaS',\r\n  mounted() {\r\n    this.initSolarSystem();\r\n  },\r\n  methods: {\r\n    initSolarSystem() {\r\n      // 1. Crear la escena\r\n      const scene = new THREE.Scene();\r\n\r\n      // 2. Crear la cámara\r\n      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n      camera.position.z = 10; // Ajustar la posición de la cámara\r\n\r\n      // 3. Crear el renderizador\r\n      const renderer = new THREE.WebGLRenderer();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n      this.$refs.solarSystemContainer.appendChild(renderer.domElement);\r\n\r\n\r\n\r\n      \r\n      // // 4. Crear el sol\r\n      const sunGeometry = new THREE.SphereGeometry(2, 32, 32);\r\n      // const sunMaterial = new THREE.MeshBasicMaterial({ color: 0xfbbf24 });\r\n      // const sun = new THREE.Mesh(sunGeometry, sunMaterial);\r\n      // scene.add(sun); // Añadir el sol a la escena\r\n      // 4. Crear la textura para el sol\r\n      const textureLoader = new TextureLoader();\r\n      const sunTexture = textureLoader.load(require('@/assets/sol.jpg')); // Cambia esta ruta a la ubicación de tu textura\r\n\r\n      // Crear el sol con textura\r\n      const sunMaterial = new THREE.MeshBasicMaterial({ map: sunTexture });\r\n      const sun = new THREE.Mesh(sunGeometry, sunMaterial);\r\n      scene.add(sun); // Añadir el sol a la escena\r\n\r\n\r\n\r\n      // 5. Crear la luz\r\n      const light = new THREE.PointLight(0xffffff, 1, 100);\r\n      light.position.set(0, 0, 0); // Luz en la posición del sol\r\n      scene.add(light);\r\n\r\n\r\n      // 6. Crear el planeta (Mercurio)\r\n      const mercuryGeometry = new THREE.SphereGeometry(0.3, 32, 32);\r\n      const mercuryMaterial = new THREE.MeshBasicMaterial({ color: 0xaaaaaa });\r\n      const mercury = new THREE.Mesh(mercuryGeometry, mercuryMaterial);\r\n      scene.add(mercury); // Añadir Mercurio a la escena\r\n\r\n      // 7. Crear la órbita de Mercurio\r\n      const orbitRadius = 3.9; // Distancia del planeta al sol\r\n      const orbitGeometry = new THREE.CircleGeometry(orbitRadius, 64);\r\n      const orbitMaterial = new THREE.LineBasicMaterial({ color: 0xffffff });\r\n      const orbit = new THREE.LineLoop(orbitGeometry, orbitMaterial);\r\n      orbit.rotation.x = Math.PI / 2; // Alinear la órbita en el plano XY\r\n      scene.add(orbit); // Añadir la órbita a la escena\r\n\r\n      // 8. Control de órbita\r\n      const controls = new OrbitControls(camera, renderer.domElement);\r\n      controls.enableZoom = true;\r\n\r\n      // 9. Función de animación\r\n      const animate = () => {\r\n        requestAnimationFrame(animate);\r\n\r\n        // Rotar el sol\r\n        sun.rotation.y += 0.01;\r\n\r\n        // Actualizar la posición de Mercurio\r\n        const time = Date.now() * 0.001; // Obtener el tiempo actual\r\n        mercury.position.x = orbitRadius * Math.cos(time); // Posición en el eje X\r\n        mercury.position.z = orbitRadius * Math.sin(time); // Posición en el eje Z\r\n\r\n        // Renderizar la escena\r\n        renderer.render(scene, camera);\r\n      };\r\n\r\n      animate();\r\n\r\n      // Ajustar el tamaño al redimensionar la ventana\r\n      window.addEventListener('resize', () => {\r\n        camera.aspect = window.innerWidth / window.innerHeight;\r\n        camera.updateProjectionMatrix();\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Añadir estilos personalizados si es necesario */\r\n</style>\r\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Prueba.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Prueba.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Prueba.vue?vue&type=template&id=f888b0f6&scoped=true\"\nimport script from \"./Prueba.vue?vue&type=script&lang=js\"\nexport * from \"./Prueba.vue?vue&type=script&lang=js\"\nimport style0 from \"./Prueba.vue?vue&type=style&index=0&id=f888b0f6&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"f888b0f6\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","ref","staticStyle","staticRenderFns","name","mounted","initSolarSystem","methods","scene","THREE","camera","window","innerWidth","innerHeight","position","z","renderer","setSize","$refs","solarSystemContainer","appendChild","domElement","sunGeometry","textureLoader","TextureLoader","sunTexture","load","require","sunMaterial","map","sun","add","light","set","mercuryGeometry","mercuryMaterial","color","mercury","orbitRadius","orbitGeometry","orbitMaterial","orbit","rotation","x","Math","PI","controls","OrbitControls","enableZoom","animate","requestAnimationFrame","y","time","Date","now","cos","sin","addEventListener","aspect","updateProjectionMatrix","component"],"sourceRoot":""}